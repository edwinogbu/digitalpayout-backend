To include the duration in the investment calculation, you need to account for how the return is distributed over the specified time period. In this case, the duration is 60, which could be interpreted as days, months, or any other time unit depending on the context of your investment.

Investment Details for gold
Rate: 12% (annual or as specified)
Deposit Amount: 15,000
Duration: 60 (assuming days or months; adjust according to your investment period)
Scenario 1: Duration in Days
If the duration is in days and the rate is annual:

Convert Annual Rate to Daily Rate:

Daily Rate
=
Annual Rate
365
=
12
365
≈
0.0328767
%
Daily Rate= 
365
Annual Rate
​
 = 
365
12
​
 ≈0.0328767%
Calculate Interest for the Given Duration:

Interest
=
Deposit Amount
×
Daily Rate
×
Duration
Interest=Deposit Amount×Daily Rate×Duration
Interest
=
15
,
000
×
0.000328767
×
60
≈
295.68
Interest=15,000×0.000328767×60≈295.68
Total Amount:

Total Amount
=
Deposit Amount
+
Interest
=
15
,
000
+
295.68
=
15
,
295.68
Total Amount=Deposit Amount+Interest=15,000+295.68=15,295.68
Scenario 2: Duration in Months
If the duration is in months and the rate is annual:

Convert Annual Rate to Monthly Rate:

Monthly Rate
=
Annual Rate
12
=
12
12
=
1
%
Monthly Rate= 
12
Annual Rate
​
 = 
12
12
​
 =1%
Calculate Interest for the Given Duration:

Interest
=
Deposit Amount
×
Monthly Rate
×
Duration
Interest=Deposit Amount×Monthly Rate×Duration
Interest
=
15
,
000
×
0.01
×
60
=
9
,
000
Interest=15,000×0.01×60=9,000
Total Amount:

Total Amount
=
Deposit Amount
+
Interest
=
15
,
000
+
9
,
000
=
24
,
000
Total Amount=Deposit Amount+Interest=15,000+9,000=24,000
Summary
The total returns will vary based on whether the duration is in days or months. Ensure you understand the duration unit used for your investment and adjust the calculations accordingly.

For Days: Total Amount = 15,295.68 (assuming annual rate divided into daily rate).
For Months: Total Amount = 24,000 (assuming simple monthly interest without compounding).
If you need a specific calculation based on how your rate is compounded or if you have more details, let me know!




    CREATE TABLE IF NOT EXISTS deposits (
        id INT AUTO_INCREMENT PRIMARY KEY,
        walletId INT NOT NULL,
        amount DECIMAL(15, 2) NOT NULL,
        currencyId INT NOT NULL,
        status ENUM('pending', 'accepted', 'rejected') DEFAULT 'pending',
        proofOfPayment VARCHAR(255) DEFAULT NULL,  -- Path to proof of payment file
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (walletId) REFERENCES wallets(id),
        FOREIGN KEY (currencyId) REFERENCES currencies(id)
    );




const mysql = require('mysql');
const dotenv = require('dotenv');

dotenv.config();

// Create a connection pool
const pool = mysql.createPool({
    connectionLimit: process.env.CONNECTION_LIMIT || 10,
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

// Helper function to execute SQL queries
function query(sql, args = []) {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, connection) => {
            if (err) return reject(err);

            connection.query(sql, args, (err, rows) => {
                connection.release();
                if (err) return reject(err);

                resolve(rows);
            });
        });
    });
}

// SQL query to create the blog_posts table
const createBlogPostsTableQuery = `CREATE TABLE IF NOT EXISTS blog_posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    author VARCHAR(255) NOT NULL,
    status ENUM('draft', 'published', 'archived') DEFAULT 'draft',
    imageUrl VARCHAR(255),  -- New field for image URL
    views INT DEFAULT 0,    -- New field for view counter
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)`;

// Function to create the blog_posts table
async function createBlogPostsTable() {
    try {
        await query(createBlogPostsTableQuery);
        console.log('Blog posts table created successfully');
    } catch (error) {
        console.error('Error creating blog posts table:', error);
    }
}

// Execute table creation query
(async () => {
    await createBlogPostsTable();
    console.log('Blog posts table setup complete');
})();

// Blog posts service object
const blogPostsService = {};

// Create a new blog post
blogPostsService.createBlogPost = async (blogPost) => {
    try {
        const { title, content, author, status = 'draft', imageUrl = null, views = 0 } = blogPost;
        const insertQuery = `
            INSERT INTO blog_posts (title, content, author, status, imageUrl, views)
            VALUES (?, ?, ?, ?, ?, ?)
        `;
        const result = await query(insertQuery, [title, content, author, status, imageUrl, views]);

        return {
            success: true,
            message: 'Blog post created successfully.',
            data: { id: result.insertId, ...blogPost },
        };
    } catch (error) {
        console.error('Error creating blog post:', error.message);
        throw new Error('Unable to create blog post at this time. Please try again later.');
    }
};

// Update an existing blog post
blogPostsService.updateBlogPost = async (id, updates) => {
    try {
        const { title, content, author, status, imageUrl, views } = updates;
        const updateQuery = `
            UPDATE blog_posts
            SET title = ?, content = ?, author = ?, status = ?, imageUrl = ?, views = ?
            WHERE id = ?
        `;
        const result = await query(updateQuery, [title, content, author, status, imageUrl, views, id]);

        if (result.affectedRows === 0) {
            return { success: false, message: 'Blog post not found or no changes made.' };
        }

        return { success: true, message: 'Blog post updated successfully.' };
    } catch (error) {
        console.error('Error updating blog post:', error.message);
        throw new Error('Unable to update blog post at this time. Please try again later.');
    }
};

// Delete a blog post
blogPostsService.deleteBlogPost = async (id) => {
    try {
        const deleteQuery = 'DELETE FROM blog_posts WHERE id = ?';
        const result = await query(deleteQuery, [id]);

        if (result.affectedRows === 0) {
            return { success: false, message: 'Blog post not found.' };
        }

        return { success: true, message: 'Blog post deleted successfully.' };
    } catch (error) {
        console.error('Error deleting blog post:', error.message);
        throw new Error('Unable to delete blog post at this time. Please try again later.');
    }
};

// Retrieve all blog posts
blogPostsService.getAllBlogPosts = async () => {
    try {
        const selectQuery = 'SELECT * FROM blog_posts';
        const blogPosts = await query(selectQuery);

        return {
            success: true,
            message: blogPosts.length > 0 ? 'Blog posts retrieved successfully.' : 'No blog posts found.',
            data: blogPosts,
        };
    } catch (error) {
        console.error('Error retrieving blog posts:', error.message);
        throw new Error('Unable to retrieve blog posts at this time. Please try again later.');
    }
};

// Retrieve a single blog post by ID
blogPostsService.getBlogPostById = async (id) => {
    try {
        const selectQuery = 'SELECT * FROM blog_posts WHERE id = ?';
        const blogPost = await query(selectQuery, [id]);

        if (blogPost.length === 0) {
            return { success: false, message: 'Blog post not found.' };
        }

        return {
            success:
